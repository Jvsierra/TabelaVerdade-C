#include <stdio.h>
#include <conio.h>
#include <ctype.h>
#include <string.h>
#include <math.h>

#define LIM 5001

char expressao[LIM], expressaoAux[LIM], letras[(LIM - 1) / 2], valoresLetras[(LIM - 1) / 2];
int tlLetras, carryOut;

int eLetra(char letra);
void expressaoMinusculo();
void somaUmBinario();
void remanejaExpressao(int inicio);
void remanejaExpressaoNegacao(int inicio);
void resolveExpressao(int inicio, int fim, int parenteses);

int main()
{
	int i, j, pos, pos2;
	char res;
		
	printf("Digite a expressao:\n");
	fflush(stdin);
	fgets(expressao, LIM, stdin);
	
	expressaoMinusculo();
	
	tlLetras = 0;
	
	for(i = 0; i < strlen(expressao); i++)
		if(eLetra(expressao[i]) == 1)
		{
			pos = 0;
			
			while(pos < tlLetras && (int)letras[pos] != (int)expressao[i])
				pos++;
				
			if(pos == tlLetras)
			{
				pos = 0;
				
				while(pos < tlLetras && (int)expressao[i] > (int)letras[pos])
					pos++;
					
				for(j = tlLetras; j > pos; j--)
					letras[j] = letras[j - 1];
						
				letras[pos] = expressao[i];
				
				tlLetras++;
			}
		}
		
	for(i = 0; i < tlLetras; i++)
		valoresLetras[i] = '0';
		
	for(i = 0; i < tlLetras; i++)
		printf("%c |", letras[i]);
	printf("s");
	printf("\n\n");
	
	for(i = 0; i < pow(2, tlLetras); i++)
	{
		strcpy(expressaoAux, expressao);
		
		for(j = 0; j < strlen(expressaoAux); j++)
		{
			if(eLetra(expressaoAux[j]) == 1)
			{
				pos = 0;
				
				while(pos < tlLetras && (int)expressao[j] != (int)letras[pos])
					pos++;
					
				if(pos == tlLetras)
					printf("ERRO!!!!\n");
				else
				{
					expressaoAux[j] = valoresLetras[pos];	
				}
			}
			
		}
			
		resolveExpressao(0, (strlen(expressaoAux) - 2), 0);
			
		for(j = 0; j < tlLetras; j++)
			printf("%c ", valoresLetras[j]);
			
		printf(" | ");	
			
		puts(expressaoAux);	
			
		if(i < pow(2, tlLetras) - 1)
			somaUmBinario();
			
		printf("\n");
	}
	
	getch();
}

void expressaoMinusculo()
{
	int i;
	
	for(i = 0; expressao[i] != '\0'; i++)
		if((int)expressao[i] >= 65 && (int)expressao[i] <= 90)
			expressao[i] += 32;
}

int eLetra(char letra)
{
	//Lembrando que todas as letras tem que estar em minúsculo
	if((int)letra >= 97 && (int)letra <= 122)
		return 1;
	else
		return 0;
}

void somaUmBinario()
{
	int i;
	
	carryOut = 0;
	
	i = tlLetras - 1;
	
	do
	{
		if(carryOut == 1)
		{
			if(valoresLetras[i] == '0')
			{
				valoresLetras[i] = '1';
				carryOut = 0;
			}
			else if(valoresLetras[i] == '1')
			{
				valoresLetras[i] = '0';
				carryOut = 1;
			}
		}
		else
		{
			if(valoresLetras[i] == '0')
			{
				valoresLetras[i] = '1';
				carryOut = 0;
			}
			else if(valoresLetras[i] == '1')
			{
				valoresLetras[i] = '0';
				carryOut = 1;
			}
		}
		
		i--;
	}while(carryOut == 1);
}

void remanejaExpressao(int inicio)
{
	int i;
	
	for(i = inicio; expressaoAux[i + 2] > (int)'\0'; i++){
		expressaoAux[i] = expressaoAux[i + 2];
	}
	
	
	expressaoAux[i] = expressaoAux[i + 2];
}

void remanejaExpressaoNegacao(int inicio)
{
	int i;
	
	for(i = inicio; expressaoAux[i + 1] > (int)'\0'; i++)
	{
		expressaoAux[i] = expressaoAux[i + 1];
	}
	
	expressaoAux[i] = '\0';
	
}

void resolveExpressao(int inicio, int fim, int parenteses)
{
	int pos, pos2, i;
	
	while(strlen(expressaoAux) > 2)
	{
		//Parênteses
		do
		{
			pos = inicio;
			
			while(pos <= fim && expressaoAux[pos] != '(')
			{
				pos++;
			}
				
			if(pos <= fim)
			{
				pos2 = pos;
				
				while(pos2 <= fim && expressaoAux[pos2] != ')')
					pos2++;
					
				if(pos2 <= fim && (pos2 - pos > 2))
				{
					resolveExpressao(pos + 1, pos2 - 1, 1);
				}
			}
		}while(pos <= fim);
		
		//Negação
		do
		{
			pos = inicio;
			
			while(pos <= fim && expressaoAux[pos] != '!')
				pos++;
				
			if(pos <= fim)
			{
				//Tem uma negação
				if(expressaoAux[pos + 1] == '1')
					expressaoAux[pos + 1] = '0';
				else
					expressaoAux[pos + 1] = '1';
					
				remanejaExpressaoNegacao(pos);
			}
		}while(pos <= fim);
		
		//Conjunção
		do
		{
			pos = inicio;
			
			while(pos <= fim && expressaoAux[pos] != '.')
				pos++;
				
			if(pos <= fim)
			{
				//Achou uma conjunção
				
				if(expressaoAux[pos - 1] == '1' && expressaoAux[pos + 1] == '1')
					expressaoAux[pos - 1] = '1';
				else
					expressaoAux[pos - 1] = '0';
					
				remanejaExpressao(pos);	
			}		
		}while(pos <= fim);
		
		//Disjunção Inclusiva
		
		do
		{
			pos = inicio;
			
			while(pos <= fim && expressaoAux[pos] != '+')
				pos++;
				
			if(pos <= fim)
			{
				//Achou uma conjunção
				
				if(expressaoAux[pos - 1] == '1' || expressaoAux[pos + 1] == '1')
					expressaoAux[pos - 1] = '1';
				else
					expressaoAux[pos - 1] = '0';
					
				remanejaExpressao(pos);	
			}		
		}while(pos <= fim);
		
		do
		{
			pos = inicio;
			
			while(pos <= fim && expressaoAux[pos] != '>')
				pos++;
				
			if(pos <= fim)
			{
				//Achou uma conjunção
				
				if(expressaoAux[pos - 1] == '1' && expressaoAux[pos + 1] == '0')
					expressaoAux[pos - 1] = '0';
				else
					expressaoAux[pos - 1] = '1';
					
				remanejaExpressao(pos);	
			}		
		}while(pos <= fim);
		
		do
		{
			pos = inicio;
			
			while(pos <= fim && expressaoAux[pos] != '=')
				pos++;
				
			if(pos <= fim)
			{
				//Achou uma conjunção
				
				if(expressaoAux[pos - 1] == expressaoAux[pos + 1])
					expressaoAux[pos - 1] = '1';
				else
					expressaoAux[pos - 1] = '0';
					
				remanejaExpressao(pos);	
				
				puts(expressaoAux);
			}		
		}while(pos <= fim);
		
		do
		{
			pos = inicio;
			
			while(pos <= fim && expressaoAux[pos] != '#')
				pos++;
				
			if(pos <= fim)
			{
				//Achou uma conjunção
				
				if(expressaoAux[pos - 1] != expressaoAux[pos + 1])
					expressaoAux[pos - 1] = '1';
				else
					expressaoAux[pos - 1] = '0';
					
				remanejaExpressao(pos);	
			}		
		}while(pos <= fim);
				
		if(parenteses == 1)
		{
			for(i = inicio - 1; i <= fim + 1; i++)
				if(expressaoAux[i] == '(' && expressaoAux[i + 2] == ')' || expressaoAux[i] == ')')
				{
					remanejaExpressaoNegacao(i);
				}
					
			inicio = 0;
			parenteses = 0;
		}
		inicio = 0;
		parenteses = 0;
		fim = strlen(expressaoAux) - 1;
	}
	
}
